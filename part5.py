# class Boook():
#     def read(self):
#         print("–ß—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏—Å—Ç—Ä—Ä–∏–∏")
#
# class StoryReader():
#     def __init__(self):
#         self.book = Boook()
#
#     def tell_story(self):
#         self.book.read()
# –≠—Ç–æ 5 –ø—Ä–∏–Ω—Ü–∏–ø SOLID üëÜ
# –ü—Ä–∏–Ω—Ü–∏–ø –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (DIP, Dependency Inversion Principle)

from abc import ABC, abstractmethod

class StorySource(ABC):
    @abstractmethod
    def get_story(self):
        pass

class Book(StorySource):
    def get_story(self):
        print("–ß—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏—Å—Ç—Ä—Ä–∏–∏")

class AudioBook(StorySource):
    def get_story(self):
        print("–ß—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏—Å—Ç—Ä—Ä–∏–∏ –≤—Å–ª—É—Ö")

class StoryReader():
    def __init__(self, story_source: StorySource):
        self.story_source = story_source

    def tell_story(self):
        self.story_source.get_story()

book = Book()
audioBook = AudioBook()

readerBook = StoryReader(book)
readerAudioBook = StoryReader(audioBook)

readerBook.tell_story()
readerAudioBook.tell_story()
